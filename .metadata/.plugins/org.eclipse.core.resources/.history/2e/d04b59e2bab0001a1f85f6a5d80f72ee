package week2.day1.zoho;
import io.restassured.RestAssured;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.given;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;

public class OAUTH2GrantTypeTestCase {
	
	
	/** The client. */
	private HttpClient client;
	private static final String clientId = "1000.RDXLRMR7U4GO4ISGGREI3XR4SESMVH";//clientId
	private static final String callBackUrl = "http://www.zoho.com/subscriptions";//The url defined in WSO2
	private static final String authorizeUrl = "https://accounts.zoho.com/oauth/v2/auth";
	static String authorizationRedirect = getAuthGrantType(callBackUrl);
	private static String getAuthGrantType(String callbackURL){
	    return authorizeUrl + "?response_type=code&client_id=" + clientId + "&redirect_uri=" + callbackURL + "&scope=testing&access_type=offline";
	}
	//Wait for user to logIn and then
	//getAccessToken(with the authorizationCode from header name 'authorization_code', callbackUrl);
	//Then call useBearerToken('access_token')
	@Test()
	public void getResponse() {
		HttpGet request = new HttpGet(authorizationRedirect);
			HttpResponse response;
		/*
		 * The response object which holds the details of the response.
		 */
	
		StringBuffer responseString = new StringBuffer();
		try {
			/*
			 * Executing the GET operation
			 */
			response = client.execute(request);

			/*
			 * Obtaining the response body from the response stream.
			 */
			BufferedReader rd = new BufferedReader(new InputStreamReader(
					response.getEntity().getContent()));
			// System.getProperty returns absolute path
			File responseFile = new File(System.getProperty("user.dir")
					+ "/data/response/" + reqAdType.toLowerCase());
			if (!responseFile.getParentFile().exists()) {
				responseFile.getParentFile().mkdirs();
			}
			// Remove if clause if you want to overwrite file
			// if(!responseFile.exists()){
			try {
				responseFile.createNewFile();
			} catch (Exception e) {
				e.printStackTrace();
			}
			// }
			BufferedWriter bw = new BufferedWriter(new FileWriter(responseFile));
			String line = "";
			while ((line = rd.readLine()) != null) {
				responseString.append(line);
				bw.append(line);
				bw.append("\n");

			}

			bw.flush();
			bw.close();
			rd.close();

			/*
			 * Setting values for the response object
			 */
			/*
			 * try{ if(responseString.toString().contains("nextmessagecheck") )
			 * { throw new
			 * Exception("Exception in response : nextmessagecheck "); } }
			 * catch(Exception e) { getResponse(reqAdType, reqUrl); }
			 */
			apiResponse.setResponseBody(responseString.toString());
			apiResponse.setResponseCode(response.getStatusLine()
					.getStatusCode());
			apiResponse.setResponseMessage(response.getStatusLine()
					.getReasonPhrase());
			Header[] rheaders = response.getAllHeaders();
			for (Header header : rheaders) {
				apiResponse.setHeader(header.getName(), header.getValue());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*
		 * Returns the RestValidator object providing the response object
		 */
		this.response = new ApiResponseValidator(apiResponse);
		this.response.setRequestUrl(reqUrl);
		// return this.response = new ApiResponseValidator(apiResponse);
		return this.response;
	}
}